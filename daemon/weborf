#!/bin/bash
# Copyright (C) 2008  Salvo "LtWorf" Tomaselli
#
# Relation is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# author Salvo "LtWorf" Tomaselli <tiposchi@tiscali.it>


### BEGIN INIT INFO
# Provides:          weborf
# Required-Start:    $network $local_fs $syslog $remote_fs
# Required-Stop:     $remote_fs
# Should-Start:      $named
# Should-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Fast and small webserver
# Description:       Weborf is a configurationless webserver mainly meant to allow users
#                    to easily share their directories over the web.
#                    It also supports php5-cgi.
### END INIT INFO
function clear_cache {
    rm -rf -- "$CACHE_DIR/"*
}

function status {
    if ! test -e $PIDFILE
        then
            echo "Weborf doesn't appear to be running"
        else
            echo "Weborf appears to be running"
    fi
}

function stopWeborf {
    #Stops all the running weborf servers (the ones started with init)
    if ! test -e $PIDFILE
    then
        echo "Weborf is not running or it was not started by init"
        exit 0
    fi

    echo -n "Stopping weborf "    
    for i in $(cat $PIDFILE)
    do
        echo -n ..
        kill $i
    done
    echo " done"
    rm -f $PIDFILE
}

function startWeborf {
    #This function will start all the needed processes for weborf
    if test -e $PIDFILE
    then
        echo "Weborf already running, if you're sure it is not running, delete $PIDFILE"
        exit 2
    fi
    
    if test -n "$AUTH_BIN"
    then
        echo "Starting authentication server for weborf"
        nohup $AUTH_BIN >/dev/null 2>&1 &
        echo ${!} >>$PIDFILE # Writes PID so it will be terminated
    fi

    virtuals=$(egrep ^virtual <"$CONF")
    if test -z "$virtuals"
    then
        echo "Starting weborf"
        nohup $DAEMON $DAEMON_OPTS $CACHE_DIR $AUTH $MIME $CGI -p80 -u $USERID -g $GROUPID -b $BASEDIR -I $INDEX >/dev/null 2>&1 &
        echo ${!} >>$PIDFILE # Writes PID so weborf can be terminated
    else #Virtual hosts
        for i in $virtuals
            do
                PORT=$(cut -d# -f2 <<<"$i")
                CMDLINE=$(cut -d# -f3 <<<"$i")
                echo "Starting weborf on port $PORT"
                nohup $DAEMON $DAEMON_OPTS $CACHE_DIR $AUTH $MIME $CGI -p $PORT -u $USERID -g $GROUPID -b $BASEDIR -I $INDEX -V "$CMDLINE" >/dev/null 2>&1 &
                echo $! >>$PIDFILE # Writes PID so weborf can be terminated
            done
    fi
}

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
DAEMON=/usr/bin/weborf      # Introduce the server's location here
NAME=weborf                 # Introduce the short server's name here
PIDFILE=/var/run/$NAME.pid
CONF=/etc/weborf.conf

test -x $DAEMON || exit 0

. /lib/lsb/init-functions

# Additional default options, these can be overriden by /etc/default/weborf
DAEMON_OPTS=""

# Time to wait for the server to die, in seconds
# If this value is set too low you might not let some servers to die gracefully
# and 'restart' will not work
DIETIME=3

# Time to wait for the server to start, in seconds
# If this value is set each time the server is started (on start or restart)
# the script will stall to try to determine if it is running
# If it is not set and the server takes time to setup a pid file the log
# message might be a false positive (says it did not start when it actually did)
#STARTTIME=2

# Server logfile
LOGFILE=$LOGDIR/$NAME.log

# Include defaults if available
test -f /etc/default/$NAME && source /etc/default/$NAME

USERNAME=$(egrep "^user=" <"$CONF" |cut -d= -f2)
GROUPNAME=$(egrep "^group=" <"$CONF" |cut -d= -f2)
BASEDIR=$(egrep "^basedir=" <"$CONF" |cut -d= -f2)
USERID=$(fgrep $USERNAME </etc/passwd |cut -d: -f3) # Gets the UID
GROUPID=$(egrep "^$GROUPNAME" </etc/group |cut -d: -f3) # Gets the GID
INDEX=$(egrep "^index=" <"$CONF" |cut -d= -f2)
MIME=$(egrep "^mime=" <"$CONF" |cut -d= -f2)
CGI=$(egrep "^cgi=" <"$CONF" |cut -d= -f2)
CACHE_DIR=$(egrep "^cache=" <"$CONF" |cut -d= -f2)

# Authentication
AUTH_BIN=$(grep "^auth-bin=" <"$CONF" |cut -d= -f2)
AUTH=$(grep "^auth=" <"$CONF" |cut -d= -f2)

if test -z "$USERNAME" || test "$USERNAME" = "root"
then
    logger -s -perror "You are trying to run weborf as root!"
    exit 0 # LSB requires 0 termination in each case
fi

if test -n "$CACHE_DIR"
then
        if ! test -d $CACHE_DIR
        then
            #Does not exist or it is not a directory
            rm -rf $CACHE_DIR
            mkdir -m700 $CACHE_DIR
            
        fi

        chown $USERNAME:$GROUPNAME $CACHE_DIR
        CACHE_DIR="-C $CACHE_DIR"
fi

if test -n "$AUTH"
then
        AUTH="-a $AUTH"
fi

if test -n "$CGI"
then
    CGI="-X -c $CGI"
fi

if test $MIME = "true"
then
    MIME="-m"
fi

if test -z $USERID
then
    echo "Unable to find user $USERNAME"
    echo "Check your configuration"
    exit 1
fi
case $1 in
    start)
        startWeborf;;
    stop)
        stopWeborf;;
    restart)
        stopWeborf
        startWeborf;;
    force-reload)
        stopWeborf
        startWeborf;;
    status)
        status;;
    clearcache)
        clear_cache;;
    * )
        echo "Usage: $0 {start|stop|restart|force-reload|status|clearcache}";;
esac

exit 0

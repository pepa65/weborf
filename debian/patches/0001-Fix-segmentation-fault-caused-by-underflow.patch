From 8763d1ca26c37b3c220a7404e908264acd6ba336 Mon Sep 17 00:00:00 2001
From: Salvo 'LtWorf' Tomaselli <tiposchi@tiscali.it>
Date: Sun, 25 Sep 2016 16:55:48 +0200
Subject: [PATCH] Fix segmentation fault caused by underflow

When listing a very large directory, weborf would create a segmentation
fault, because the remaining space in the buffer might not be equal to zero and be negative
instead, which was not considered as a terminating condition.

Now the listing terminates and frees up before returning an error code.
---
 utils.c | 30 +++++++++++++++++++++---------
 1 file changed, 21 insertions(+), 9 deletions(-)

diff --git a/utils.c b/utils.c
index 3018f78..bd0d1fc 100644
--- a/utils.c
+++ b/utils.c
@@ -47,6 +47,12 @@ page with links to all the files within the directory.
 Buffer for html must be allocated by the calling function.
 bufsize is the size of the buffer allocated for html
 parent is true when the dir has a parent dir
+
+Returns the size of the HTML.
+
+-1: unable to open the file
+-2: out of memory
+
 */
 int list_dir(connection_t *connection_prop, char *html, unsigned int bufsize, bool parent) {
     int pagesize=0; //Written bytes on the page
@@ -55,15 +61,17 @@ int list_dir(connection_t *connection_prop, char *html, unsigned int bufsize, bo
     char *color; //Depending on row count chooses a background color
     char *measure; //contains measure unit for file's size (B, KiB, MiB)
     int counter = 0;
+    int errcode = 0;
 
     char path[INBUFFER]; //Buffer to contain element's absolute path
 
-    struct dirent **namelist;
+    struct dirent **namelist = NULL;
     counter = scandir(connection_prop->strfile, &namelist, 0, alphasort);
 
 
     if (counter <0) { //Open not succesfull
-        return -1;
+        errcode = -1;
+        goto escape;
     }
 
     //Specific header table)
@@ -85,7 +93,7 @@ int list_dir(connection_t *connection_prop, char *html, unsigned int bufsize, bo
 
     for (i=0; i<counter; i++) {
         //Skipping hidden files
-        if (namelist[i]->d_name[0] == '.') {
+        if (namelist[i]->d_name[0] == '.' || errcode) {
             free(namelist[i]);
             continue;
         }
@@ -93,7 +101,6 @@ int list_dir(connection_t *connection_prop, char *html, unsigned int bufsize, bo
         snprintf(path, INBUFFER,"%s/%s", connection_prop->strfile, namelist[i]->d_name);
 
         //Stat on the entry
-
         stat(path, &f_prop);
         int f_mode = f_prop.st_mode; //Get's file's mode
 
@@ -139,14 +146,19 @@ int list_dir(connection_t *connection_prop, char *html, unsigned int bufsize, bo
         }
 
         free(namelist[i]);
+        if (maxsize <= 0) {
+            errcode = -2; // Out of memory
+        }
     }
 
+escape:
     free(namelist);
-
-    printf_s=snprintf(html+pagesize,maxsize,"</table>%s",HTMLFOOT);
-    pagesize+=printf_s;
-
-    return pagesize;
+    if (errcode == 0) {
+        printf_s=snprintf(html+pagesize,maxsize,"</table>%s",HTMLFOOT);
+        pagesize+=printf_s;
+        return pagesize;
+    } else
+        return errcode;
 }
 
 /**
-- 
2.9.3

